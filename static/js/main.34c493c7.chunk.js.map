{"version":3,"sources":["api/index.js","store/plants.js","store/reactors.js","store/productions.js","store/index.js","views/MixView.jsx","views/PlantView/components/ReactorIndicator.jsx","utils/types.js","views/PlantView/index.jsx","HOC/buildLoader.js","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["REACT_APP_NUCLEAR_MONITOR_API","process","a","Promise","resolve","setTimeout","fetch","res","json","data","PLANTS_LOAD_ACTION","PLANTS_RECEIVE_ACTION","receivePlantsAction","errors","type","initialState","loading","loaded","plantsLoadedSelector","state","plants","plantsSelector","values","plantSelector","plantId","plantsReducer","action","REACTORS_LOAD_ACTION","REACTORS_RECEIVE_ACTION","receiveReactorsAction","reactorsLoadedSelector","reactors","reactorsReducer","PRODUCTIONS_LOAD_ACTION","PRODUCTIONS_RECEIVE_ACTION","receiveProductionsAction","productionsLoadedSelector","productions","actualProdOfReactor","eicCode","pop","productionsReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","MixView","className","span","HEIGHT","PropTypes","shape","id","string","isRequired","name","coords","arrayOf","number","WIDTH","ReactorIndicator","props","power","load","absLoad","part","Math","floor","style","height","width","background","connect","match","params","Object","filter","reactor","reactorsOfPlantSelector","map","actualProd","value","plant","length","key","power_MW","Loader","this","prevProps","prevOtherProps","omit","otherProps","equals","Component","buildLoader","loadFunction","PlantsLoader","dispatch","getPlants","then","indexBy","prop","catch","console","error","ReactorsLoader","getReactors","ProductionsLoader","getProductions","body","document","html","documentElement","max","scrollHeight","offsetHeight","clientHeight","withRouter","isLoaded","goTo","url","history","push","size","spinning","title","visible","placement","mask","closable","path","exact","component","PlantView","to","pathname","Content","Map","center","zoom","zoomControl","ZoomControl","position","TileLayer","attribution","Marker","onClick","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34c493c7.chunk.js","sourcesContent":["const { REACT_APP_NUCLEAR_MONITOR_API } = process.env;\n\nexport async function getPlants() {\n  await new Promise(resolve => setTimeout(resolve, 200));\n\n  const res = await fetch(`${REACT_APP_NUCLEAR_MONITOR_API}/plants`);\n  const data = await res.json();\n\n  return data;\n}\n\nexport async function getReactors() {\n  const res = await fetch(`${REACT_APP_NUCLEAR_MONITOR_API}/reactors`);\n  const data = await res.json();\n\n  return data;\n}\n\nexport async function getProductions() {\n  const res = await fetch(`${REACT_APP_NUCLEAR_MONITOR_API}/productions`);\n  const data = await res.json();\n\n  return data;\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport { getPlants } from '../api';\n\nexport const PLANTS_LOAD_ACTION = 'PLANTS_LOAD_ACTION';\nexport const PLANTS_RECEIVE_ACTION = 'PLANTS_RECEIVE_ACTION';\n\nfunction loadPlantsAction() {\n  return { type: PLANTS_LOAD_ACTION };\n}\n\nfunction receivePlantsAction({ data, errors }) {\n  return { type: PLANTS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllPlants() {\n  return function dispatchLoadAllPlants(dispatch) {\n    dispatch(loadPlantsAction());\n    return getPlants()\n      .then(data =>\n        dispatch(\n          receivePlantsAction({\n            data: indexBy(prop('id'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.error(errors) && dispatch(receivePlantsAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction plantsReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case PLANTS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case PLANTS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function plantsLoadedSelector(state) {\n  return state.plants.loaded;\n}\n\nexport function plantsSelector(state) {\n  return values(state.plants.data);\n}\n\nexport function plantSelector(plantId, state) {\n  return state.plants.data[plantId];\n}\n\nexport default plantsReducer;\n","import { values, indexBy, prop } from 'ramda';\n\nimport { getReactors } from '../api';\n\nexport const REACTORS_LOAD_ACTION = 'REACTORS_LOAD_ACTION';\nexport const REACTORS_RECEIVE_ACTION = 'REACTORS_RECEIVE_ACTION';\n\nfunction loadReactorsAction() {\n  return { type: REACTORS_LOAD_ACTION };\n}\n\nfunction receiveReactorsAction({ data, errors }) {\n  return { type: REACTORS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllReactors() {\n  return function dispatchLoadAllReactors(dispatch) {\n    dispatch(loadReactorsAction());\n    return getReactors()\n      .then(data =>\n        dispatch(\n          receiveReactorsAction({\n            data: indexBy(prop('eicCode'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.error(errors) && dispatch(receiveReactorsAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction reactorsReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case REACTORS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case REACTORS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function reactorsLoadedSelector(state) {\n  return state.reactors.loaded;\n}\n\nexport function reactorsSelector(state) {\n  return values(state.reactors.data);\n}\n\nexport function reactorSelector(eicCode, state) {\n  return state.reactors.data[eicCode];\n}\n\nexport function reactorsOfPlantSelector(plantId, state) {\n  return Object.values(state.reactors.data).filter(\n    reactor => reactor.plantId === plantId,\n  );\n}\n\nexport default reactorsReducer;\n","import { values, indexBy, prop } from 'ramda';\n\nimport { getProductions } from '../api';\n\nexport const PRODUCTIONS_LOAD_ACTION = 'PRODUCTIONS_LOAD_ACTION';\nexport const PRODUCTIONS_RECEIVE_ACTION = 'PRODUCTIONS_RECEIVE_ACTION';\n\nfunction loadProductionsAction() {\n  return { type: PRODUCTIONS_LOAD_ACTION };\n}\n\nfunction receiveProductionsAction({ data, errors }) {\n  return { type: PRODUCTIONS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllProductions() {\n  return function dispatchLoadAllProductions(dispatch) {\n    dispatch(loadProductionsAction());\n    return getProductions()\n      .then(data =>\n        dispatch(\n          receiveProductionsAction({\n            data: indexBy(prop('eicCode'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.error(errors) &&\n          dispatch(receiveProductionsAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction productionsReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case PRODUCTIONS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case PRODUCTIONS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function productionsLoadedSelector(state) {\n  return state.productions.loaded;\n}\n\nexport function productionsSelector(state) {\n  return values(state.productions.data);\n}\n\nexport function productionSelector(eicCode, state) {\n  return state.productions.data[eicCode];\n}\n\nexport function actualProdOfReactor(eicCode, state) {\n  return state.productions.data[eicCode].values.pop();\n}\n\nexport default productionsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport plantsReducer from './plants';\nimport reactorsReducer from './reactors';\nimport productionsReducer from './productions';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  plants: plantsReducer,\n  reactors: reactorsReducer,\n  productions: productionsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // actionSanitizer,\n  // stateSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import React from 'react';\n\nimport { Row, Col } from 'antd';\n\nfunction MixView() {\n  return (\n    <div className=\"MixView\">\n      <Row>\n        <Col span={24}>\n          <div>MixView</div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default MixView;\n","import React from 'react';\n\nconst HEIGHT = '70px';\nconst WIDTH = '50px';\n\nfunction ReactorIndicator(props) {\n  const { power, load } = props;\n  const absLoad = load < 0 ? 0 : load;\n  const part = Math.floor((absLoad / power) * 100);\n\n  return (\n    <span\n      className=\"ReactIndicator\"\n      style={{\n        height: HEIGHT,\n        width: WIDTH,\n        background: `linear-gradient(0deg, rgba(9,121,23,1) 0%, rgba(9,121,23,1) ${part}%, rgba(255,255,255,1) ${part}%)`,\n      }}\n    >\n      <span className=\"ReactIndicator__label\">{absLoad}</span>\n    </span>\n  );\n}\n\nexport default ReactorIndicator;\n","import PropTypes from 'prop-types';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const PlantType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  coords: PropTypes.arrayOf(PropTypes.number).isRequired,\n  reactors: PropTypes.arrayOf(PropTypes.string).isRequired,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\nimport { plantSelector } from '../../store/plants';\nimport { PlantType } from '../../utils/types';\nimport ReactorIndicator from './components/ReactorIndicator';\nimport { reactorsOfPlantSelector } from '../../store/reactors';\nimport { actualProdOfReactor } from '../../store/productions';\n\nfunction PlantView(props) {\n  const { plant, reactors } = props;\n  return (\n    <div className=\"PlantView\">\n      <Row>\n        <Col span={24}>\n          <h2>{plant.name}</h2>\n          <div>\n            {`${plant.reactors.length} réacteur${\n              plant.reactors.length > 1 ? 's' : ''\n            }`}\n          </div>\n          <div>\n            {reactors.map(reactor => (\n              <ReactorIndicator\n                key={reactor.eicCode}\n                power={reactor.power_MW}\n                load={reactor.actualProd}\n              />\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nPlantView.propTypes = {\n  plant: PlantType.isRequired,\n};\n\nexport default connect((state, props) => {\n  const { plantId } = props.match.params;\n  const reactors = reactorsOfPlantSelector(plantId, state).map(reactor => ({\n    ...reactor,\n    actualProd: actualProdOfReactor(reactor.eicCode, state).value,\n  }));\n\n  return {\n    plant: plantSelector(plantId, state),\n    reactors,\n  };\n})(PlantView);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentDidMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin, Row, Col, Drawer } from 'antd';\nimport { Map, TileLayer, Marker, ZoomControl } from 'react-leaflet';\n\nimport MixView from '../views/MixView';\nimport PlantView from '../views/PlantView';\n\n// import HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\nimport {\n  loadAllPlants,\n  plantsLoadedSelector,\n  plantsSelector,\n} from '../store/plants';\n\nimport { loadAllReactors, reactorsLoadedSelector } from '../store/reactors';\nimport {\n  loadAllProductions,\n  productionsLoadedSelector,\n} from '../store/productions';\n\nimport { PlantType } from '../utils/types';\n\nconst PlantsLoader = buildLoader(loadAllPlants);\nconst ReactorsLoader = buildLoader(loadAllReactors);\nconst ProductionsLoader = buildLoader(loadAllProductions);\n\n// const ConnectedHeaderMenu = withRouter(\n//   connect((state, props) => ({\n//     countries: countriesSelector(state),\n//     areas: areasSelector(state),\n//     goTo: url => props.history.push(url),\n//   }))(HeaderMenu),\n// );\n\nconst { body } = document;\nconst html = document.documentElement;\n\nconst height = Math.max(\n  body.scrollHeight,\n  body.offsetHeight,\n  html.clientHeight,\n  html.scrollHeight,\n  html.offsetHeight,\n);\n\nfunction AppLayout(props) {\n  const { isLoaded, plants, goTo } = props;\n  return (\n    <div className=\"AppLayout\">\n      <PlantsLoader />\n      <ReactorsLoader />\n      <ProductionsLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        {isLoaded && (\n          <Layout>\n            <Drawer\n              title=\"Nuclear Monitor\"\n              visible\n              placement=\"left\"\n              mask={false}\n              closable={false}\n              width={300}\n            >\n              <Switch>\n                <Route path=\"/\" exact component={MixView} />\n                <Route path=\"/plant/:plantId\" exact component={PlantView} />\n                {/* <Route\n                path=\"/country/:countryCode/:tab?\"\n                exact\n                component={CountryView}\n              /> */}\n                <Route component={() => <Redirect to={{ pathname: '/' }} />} />\n              </Switch>\n            </Drawer>\n            {/* <Layout.Header className=\"AppLayout__header\">\n            <ConnectedHeaderMenu />\n          </Layout.Header> */}\n            <Row>\n              <Col span={24}>\n                <Layout.Content className=\"AppLayout__content\">\n                  <Map\n                    center={[47.505, 2]}\n                    zoom={6}\n                    style={{ height }}\n                    zoomControl={false}\n                  >\n                    <ZoomControl position=\"topright\" />\n                    <TileLayer\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    />\n                    {plants.map(plant => (\n                      <Marker\n                        key={plant.id}\n                        position={plant.coords}\n                        onClick={() => goTo(`/plant/${plant.id}`)}\n                      />\n                    ))}\n                  </Map>\n                </Layout.Content>\n                {/* <Layout.Footer></Layout.Footer> */}\n              </Col>\n            </Row>\n          </Layout>\n        )}\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  plants: PropTypes.arrayOf(PlantType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect((state, props) => ({\n    isLoaded:\n      plantsLoadedSelector(state) &&\n      reactorsLoadedSelector(state) &&\n      productionsLoadedSelector(state),\n    plants: plantsSelector(state),\n    goTo: url => props.history.push(url),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}